name: 'ME change request'
description: 'View, create, update, close and delete manage engine change request'
author: 'sidlen'
inputs:
  input_data:
    description: 'dict generated by another run of this action'
    required: false
    default: "${{ env.INPUT_DATA }}"
  script_output_data:
    description: 'dict with status, comment and log generated by another script'
    required: false
    default: "${{ env.SCRIPT_OUTPUT_DATA }}"
  chr_action:
    description: 'one of available actions: view, create, update, close, delete'
    required: true
    default: "view"
  hd_api_url:
    description: 'Manage Engine api url'
    required: false
    default: "${{ env.HD_API_URL }}"
  hd_api_token:
    description: 'Manage Engine api token'
    required: false
    default: "${{ secrets.HD_API_TOKEN }}"
  planned_solve_time:
    description: 'time in minutes'
    required: false
    default: "30"
  template_id:
    description: 'template id of change request'
    required: false
    default: "1"
  services_id:
    description: 'affected service id'
    required: false
    default: "938"
  service_name:
    description: 'name of the service to which the script is applied to the database'
    required: false
    default: "${{ env.SERVICE_NAME }}"
  # approvers_list:
  #   description: 'list of users, who approved pull request'
  #   required: false
  #   default: "${{ env.APPROVERS_LIST }}"
  change_description:
    description: 'description of change request'
    required: false
    default: "${{ env.CHANGE_DESCRIPTION }}"
  title:
    description: 'title of change request'
    required: false
    default: "${{ env.TITLE }}"
  change_type_id:
    description: 'id of change type, default - Standard'
    required: false
    default: "1"
  change_manager_email:
    description: 'email of change manager user'
    required: true
    default: "${{ env.CHANGE_MANAGER_EMAIL }}"
  # change_owner_email:
  #   description: 'email of change owner user'
  #   required: true
  #   default: "${{ env.CHANGE_OWNER_EMAIL }}"
  # change_requester_email:
  #   description: 'email of change requester user, default equal change_owner_email'
  #   required: false
  #   default: ""
  workflow_id:
    description: 'id of workflow, default - Standard Change'
    required: false
    default: "601"
  reason_for_change_id:
    description: 'id of reason for change, default - Maintenance'
    required: false
    default: "2"
  # commit_url:
  #   description: 'pull request url'
  #   required: false
  #   default: ""
  pr_output_data:
    description: 'dict with approvers_emails list, pr_url, change_requester_email and change_owner_email'
    required: true
    default: "${{ env.PR_OUTPUT_DATA }}"

runs:
  using: 'docker'
  image: 'Dockerfile'
  env:
    INPUT_DATA: "${{ inputs.input_data }}"
    SCRIPT_OUTPUT_DATA: "${{ inputs.script_output_data }}"
    CHR_ACTION: "${{ inputs.chr_action }}"
    HD_API_URL: "${{ inputs.hd_api_url }}"
    HD_API_TOKEN: "${{ inputs.hd_api_token }}"
    PLANNED_SOLVE_TIME: "${{ inputs.planned_solve_time }}"
    TEMPLATE_ID: "${{ inputs.template_id }}"
    SERVICES_ID: "${{ inputs.services_id }}"
    SERVICE_NAME: "${{ inputs.service_name }}"
    # APPROVERS_LIST: "${{ inputs.approvers_list }}"
    DESCRIPTION: "${{ inputs.change_description }}"
    TITLE: "${{ inputs.title }}"
    CHANGE_TYPE_ID: "${{ inputs.change_type_id }}"
    CHANGE_MANAGER_EMAIL: "${{ inputs.change_manager_email }}"
    # CHANGE_OWNER_EMAIL: "${{ inputs.change_owner_email }}"
    # CHANGE_REQUESTER_EMAIL: "${{ inputs.change_requester_email }}"
    WORKFLOW_ID: "${{ inputs.workflow_id }}"
    REASON_FOR_CHANGE_ID: "${{ inputs.reason_for_change_id }}"
    # COMMIT_URL: "${{ inputs.commit_url }}"
    PR_OUTPUT_DATA: "${{ inputs.pr_output_data }}"
outputs:
  output_data:
    description: 'dict with change_id, change_action and close_details_id generated by this action'
